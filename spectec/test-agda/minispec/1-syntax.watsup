;; Meta

syntax n = nat

var i : nat
var j : nat
var k : nat

syntax name hint(desc "name") = text


;; Values

syntax byte hint(desc "byte") = nat  ;; TODO
syntax u32 hint(desc "32-bit integer") = nat  ;; TODO

var b : byte


;; Indices

syntax idx hint(desc "index") = nat
syntax funcidx hint(desc "function index") = idx
syntax globalidx hint(desc "global index") = idx
syntax labelidx hint(desc "label index") = idx
syntax localidx hint(desc "local index") = idx

var x : idx
var y : idx
var l : labelidx


;; Types

syntax numtype hint(desc "number type") =
  | I32
syntax valtype hint(desc "value type") =
  | numtype | BOT

syntax in hint(show I#n) = | I32

var t : valtype
var nt : numtype

syntax resulttype hint(desc "result type") =
  valtype*

syntax globaltype hint(desc "global type") =
  MUT? valtype
syntax functype hint(desc "function type") =
  resulttype -> resulttype

var ft : functype
var gt : globaltype


;; Operators

syntax sx hint(desc "signedness") = | U | S

syntax unop_IXX = | CLZ | CTZ | POPCNT

syntax binop_IXX =
  | ADD | SUB | MUL | DIV sx hint(show DIV_#%) | REM sx hint(show REM_#%)
  | AND | OR | XOR | SHL | SHR sx hint(show SHR_#%) | ROTL | ROTR

syntax testop_IXX = | EQZ

syntax relop_IXX =
  | EQ | NE | LT sx hint(show LT_#%) | GT sx hint(show GT_#%) | LE sx hint(show LE_#%) | GE sx hint(show GE_#%)

syntax unop_numtype = | _I unop_IXX
syntax binop_numtype = | _I binop_IXX
syntax testop_numtype = | _I testop_IXX
syntax relop_numtype = | _I relop_IXX

var unop : unop_numtype
var binop : binop_numtype
var testop : testop_numtype
var relop : relop_numtype


;; Instructions

syntax c_numtype = nat  ;; TODO
var c : c_numtype

syntax blocktype hint(desc "block type") = functype  ;; TODO
var bt : blocktype

syntax instr/control hint(desc "control instruction") =
  | UNREACHABLE
  | NOP
  | DROP
  | SELECT valtype?
  | BLOCK blocktype instr*
  | LOOP blocktype instr*
  | IF blocktype instr* ELSE instr*
  | BR labelidx
  | BR_IF labelidx
  | CALL funcidx
  | RETURN
  | ...

syntax instr/numeric hint(desc "numeric instruction") = ...
  | CONST numtype c_numtype          hint(show %.CONST %)
  | UNOP numtype unop_numtype        hint(show %.%)
  | BINOP numtype binop_numtype      hint(show %.%)
  | TESTOP numtype testop_numtype    hint(show %.%)
  | RELOP numtype relop_numtype      hint(show %.%)
  | ...

syntax instr/state hint(desc "state instruction") = ...
  | LOCAL.GET localidx
  | LOCAL.SET localidx
  | LOCAL.TEE localidx
  | GLOBAL.GET globalidx
  | GLOBAL.SET globalidx

syntax expr hint(desc "expression") =
  instr*

syntax instr hint(desc "instruction")


;; Modules

syntax func hint(desc "function") =
  FUNC functype valtype* expr
syntax global hint(desc "global") =
  GLOBAL globaltype expr
syntax start hint(desc "start function") =
  START funcidx

syntax module hint(desc "module") =
  MODULE func* global* start*
