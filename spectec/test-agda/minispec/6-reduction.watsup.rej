--- 6-reduction.watsup	2023-04-27 15:30:00
+++ 6-reduction.watsup	2023-05-02 17:11:03
@@ -70,27 +70,9 @@
   -- if c = 0
 
 
-rule Step_pure/br_table-lt:
-  (CONST I32 i) (BR_TABLE l* l')  ~>  (BR l*[i])
-  -- if i < |l*|
-
-rule Step_pure/br_table-ge:
-  (CONST I32 i) (BR_TABLE l* l')  ~>  (BR l')
-  -- if i >= |l*|
-
-
 rule Step_read/call:
   z; (CALL x)  ~>  (CALL_ADDR $funcaddr(z)[x])  ;; TODO
 
-rule Step_read/call_indirect-call:
-  z; (CONST I32 i) (CALL_INDIRECT x ft)  ~>  (CALL_ADDR a)
-  -- if $table(z, x)[i] = (REF.FUNC_ADDR a)
-  -- if $funcinst(z)[a] = m; func
-
-rule Step_read/call_indirect-trap:
-  z; (CONST I32 i) (CALL_INDIRECT x ft)  ~>  TRAP
-  -- otherwise
-
 rule Step_read/call_addr:
   z; val^k (CALL_ADDR a)  ~>  (FRAME_ n `{f} (LABEL_ n `{epsilon} instr*))
   -- if $funcinst(z)[a] = m; FUNC (t_1^k -> t_2^n) t* instr*
@@ -134,32 +116,6 @@
   -- if c = $relop(relop, nt, c_1, c_2)
 
 
-rule Step_pure/extend:
-  (CONST nt c) (EXTEND nt n)  ~>  (CONST nt $ext(n, $size(nt), S, c))
-
-
-rule Step_pure/cvtop-val:
-  (CONST nt c_1) (CVTOP nt_1 cvtop nt_2 sx?)  ~>  (CONST nt c)
-  -- if $cvtop(nt_1, cvtop, nt_2, sx?, c_1) = c  ;; TODO
-
-rule Step_pure/cvtop-trap:
-  (CONST nt c_1) (CVTOP nt_1 cvtop nt_2 sx?)  ~>  TRAP
-  -- if $cvtop(nt_1, cvtop, nt_2, sx?, c_1) = epsilon  ;; TODO
-
-
-rule Step_read/ref.func:
-  z; (REF.FUNC x) ~> (REF.FUNC_ADDR $funcaddr(z)[x])
-
-
-rule Step_pure/ref.is_null-true:
-  val REF.IS_NULL  ~>  (CONST I32 1)
-  -- if val = (REF.NULL rt)
-
-rule Step_pure/ref.is_null-false:
-  val REF.IS_NULL  ~>  (CONST I32 0)
-  -- otherwise
-
-
 rule Step_read/local.get:
   z; (LOCAL.GET x)  ~>  $local(z, x)
 
@@ -175,191 +131,3 @@
 
 rule Step/global.set:
   z; val (GLOBAL.SET x)  ~>  $with_global(z, x, val); epsilon
-
-
-rule Step_read/table.get-trap:
-  z; (CONST I32 i) (TABLE.GET x)  ~>  TRAP
-  -- if i >= |$table(z, x)|
-
-rule Step_read/table.get-val:
-  z; (CONST I32 i) (TABLE.GET x)  ~>  $table(z,x)[i]
-  -- if i < |$table(z, x)|
-
-rule Step/table.set-trap:
-  z; (CONST I32 i) ref (TABLE.GET x)  ~>  z; TRAP
-  -- if i >= |$table(z, x)|
-
-rule Step/table.set-val:
-  z; (CONST I32 i) ref (TABLE.GET x)  ~>  $with_table(z, x, i, ref); epsilon
-  -- if i < |$table(z, x)|
-
-
-rule Step_read/table.size:
-  z; (TABLE.SIZE x)  ~>  (CONST I32 n)
-  -- if |$table(z, x)| = n  ;; TODO: inline this
-
-
-rule Step/table.grow-succeed:
-  z; ref (CONST I32 n) (TABLE.GROW x)  ~>  $with_tableext(z, x, ref^n); (CONST I32 $(|$table(z, x)|))
-
-rule Step/table.grow-fail:
-  z; ref (CONST I32 n) (TABLE.GROW x)  ~>  z; (CONST I32 $(-1))
-
-
-rule Step_read/table.fill-trap:
-  z; (CONST I32 i) val (CONST I32 n) (TABLE.FILL x)  ~>  TRAP
-  -- if $(i + n) > |$table(z, x)|
-
-rule Step_read/table.fill-zero:
-  z; (CONST I32 i) val (CONST I32 n) (TABLE.FILL x)  ~>  epsilon
-  -- otherwise
-  -- if n = 0
-
-rule Step_read/table.fill-succ:
-  z; (CONST I32 i) val (CONST I32 n) (TABLE.FILL x)  ~>
-    (CONST I32 i) val (TABLE.SET x)
-    (CONST I32 $(i+1)) val (CONST I32 $(n-1)) (TABLE.FILL x)
-  -- otherwise
-
-
-rule Step_read/table.copy-trap:
-  z; (CONST I32 j) (CONST I32 i) (CONST I32 n) (TABLE.COPY x y)  ~>  TRAP
-  -- if $(i + n) > |$table(z, y)| \/ $(j + n) > |$table(z, x)|
-
-rule Step_read/table.copy-zero:
-  z; (CONST I32 j) (CONST I32 i) (CONST I32 n) (TABLE.COPY x y)  ~>  epsilon
-  -- otherwise
-  -- if n = 0
-
-rule Step_read/table.copy-le:
-  z; (CONST I32 j) (CONST I32 i) (CONST I32 n) (TABLE.COPY x y)  ~>
-    (CONST I32 j) (CONST I32 i) (TABLE.GET y) (TABLE.SET x)
-    (CONST I32 $(j+1)) (CONST I32 $(i+1)) (CONST I32 $(n-1)) (TABLE.COPY x y)
-  -- otherwise
-  -- if j <= i
-
-rule Step_read/table.copy-gt:
-  z; (CONST I32 j) (CONST I32 i) (CONST I32 n) (TABLE.COPY x y)  ~>
-    (CONST I32 $(j+n-1)) (CONST I32 $(i+n-1)) (TABLE.GET y) (TABLE.SET x)
-    (CONST I32 $(j+1)) (CONST I32 $(i+1)) (CONST I32 $(n-1)) (TABLE.COPY x y)
-  -- otherwise
-
-
-rule Step_read/table.init-trap:
-  z; (CONST I32 j) (CONST I32 i) (CONST I32 n) (TABLE.INIT x y)  ~>  TRAP
-  -- if $(i + n) > |$elem(z, y)| \/ $(j + n) > |$table(z, x)|
-
-rule Step_read/table.init-zero:
-  z; (CONST I32 j) (CONST I32 i) (CONST I32 n) (TABLE.INIT x y)  ~>  epsilon
-  -- otherwise
-  -- if n = 0
-
-rule Step_read/table.init-succ:
-  z; (CONST I32 j) (CONST I32 i) (CONST I32 n) (TABLE.INIT x y)  ~>
-    (CONST I32 j) $elem(z,y)[i] (TABLE.SET x)
-    (CONST I32 $(j+1)) (CONST I32 $(i+1)) (CONST I32 $(n-1)) (TABLE.INIT x y)
-  -- otherwise
-
-
-rule Step/elem.drop:
-  z; (ELEM.DROP x)  ~>  $with_elem(z, x, epsilon); epsilon
-
-
-rule Step_read/load-num-trap:
-  z; (CONST I32 i) (LOAD nt n_A n_O)  ~>  TRAP
-  -- if $(i + n_O + $size(nt)/8 >= |$mem(z, 0)|)
-
-rule Step_read/load-num-val:
-  z; (CONST I32 i) (LOAD nt n_A n_O)  ~>  (CONST nt c)
-  -- if $bytes_($size(nt), c) = $mem(z, 0)[i + n_O : $size(nt)/8]
-
-rule Step_read/load-pack-trap:
-  z; (CONST I32 i) (LOAD nt (n _ sx) n_A n_O)  ~>  TRAP
-  -- if $(i + n_O + n/8 >= |$mem(z, 0)|)
-
-rule Step_read/load-pack-val:
-  z; (CONST I32 i) (LOAD nt (n _ sx) n_A n_O)  ~>  (CONST nt c)
-  -- if $bytes_(n, c) = $mem(z, 0)[i + n_O : n/8]
-
-
-rule Step/store-num-trap:
-  z; (CONST I32 i) (CONST I32 c) (STORE nt n_A n_O)  ~>  z; TRAP
-  -- if $(i + n_O + $size(nt)/8) >= |$mem(z, 0)|
-
-rule Step/store-num-val:
-  z; (CONST I32 i) (CONST I32 c) (STORE nt n_A n_O)  ~>  $with_mem(z, 0, $(i + n_O), $($size(nt)/8), b*); epsilon
-  -- if b* = $bytes_($size(nt), c)
-
-rule Step/store-pack-trap:
-  z; (CONST I32 i) (CONST I32 c) (STORE nt n n_A n_O)  ~>  z; TRAP
-  -- if $(i + n_O + n/8) >= |$mem(z, 0)|
-
-rule Step/store-pack-val:
-  z; (CONST I32 i) (CONST I32 c) (STORE nt n n_A n_O)  ~>  $with_mem(z, 0, $(i + n_O), $(n/8), b*); epsilon
-  -- if b* = $bytes_(n, $wrap_(($size(nt),n), c))
-
-
-rule Step/memory.grow-succeed:
-  z; (CONST I32 n) (MEMORY.GROW)  ~>  $with_memext(z, 0, 0^(n * 64 * $Ki)); (CONST I32 $(|$mem(z, 0)|))
-
-rule Step/memory.grow-fail:
-  z; (CONST I32 n) (MEMORY.GROW)  ~>  z; (CONST I32 $(-1))
-
-
-rule Step_read/memory.fill-trap:
-  z; (CONST I32 i) val (CONST I32 n) (MEMORY.FILL)  ~>  TRAP
-  -- if $(i + n) > |$mem(z, 0)|
-
-rule Step_read/memory.fill-zero:
-  z; (CONST I32 i) val (CONST I32 n) (MEMORY.FILL)  ~>  epsilon
-  -- otherwise
-  -- if n = 0
-
-rule Step_read/memory.fill-succ:
-  z; (CONST I32 i) val (CONST I32 n) (MEMORY.FILL)  ~>
-    (CONST I32 i) val (STORE I32 8 0 0)
-    (CONST I32 $(i+1)) val (CONST I32 $(n-1)) (MEMORY.FILL)
-  -- otherwise
-
-
-rule Step_read/memory.copy-trap:
-  z; (CONST I32 j) (CONST I32 i) (CONST I32 n) (MEMORY.COPY)  ~>  TRAP
-  -- if $(i + n) > |$table(z, 0)| \/ $(j + n) > |$table(z, 0)|
-
-rule Step_read/memory.copy-zero:
-  z; (CONST I32 j) (CONST I32 i) (CONST I32 n) (MEMORY.COPY)  ~>  epsilon
-  -- otherwise
-  -- if n = 0
-
-rule Step_read/memory.copy-le:
-  z; (CONST I32 j) (CONST I32 i) (CONST I32 n) (MEMORY.COPY)  ~>
-    (CONST I32 j) (CONST I32 i) (LOAD I32 (8 _ U) 0 0) (STORE I32 8 0 0)
-    (CONST I32 $(j+1)) (CONST I32 $(i+1)) (CONST I32 $(n-1)) (MEMORY.COPY)
-  -- otherwise
-  -- if j <= i
-
-rule Step_read/memory.copy-gt:
-  z; (CONST I32 j) (CONST I32 i) (CONST I32 n) (MEMORY.COPY)  ~>
-    (CONST I32 $(j+n-1)) (CONST I32 $(i+n-1)) (LOAD I32 (8 _ U) 0 0) (STORE I32 8 0 0)
-    (CONST I32 j) (CONST I32 i) (CONST I32 $(n-1)) (MEMORY.COPY)
-  -- otherwise
-
-
-rule Step_read/memory.init-trap:
-  z; (CONST I32 j) (CONST I32 i) (CONST I32 n) (MEMORY.INIT x)  ~>  TRAP
-  -- if $(i + n) > |$data(z, y)| \/ $(j + n) > |$mem(z, 0)|
-
-rule Step_read/memory.init-zero:
-  z; (CONST I32 j) (CONST I32 i) (CONST I32 n) (MEMORY.INIT x)  ~>  epsilon
-  -- otherwise
-  -- if n = 0
-
-rule Step_read/memory.init-succ:
-  z; (CONST I32 j) (CONST I32 i) (CONST I32 n) (MEMORY.INIT x)  ~>
-    (CONST I32 j) (CONST I32 $data(z,x)[i]) (STORE I32 8 0 0)
-    (CONST I32 $(j+1)) (CONST I32 $(i+1)) (CONST I32 $(n-1)) (MEMORY.INIT x)
-  -- otherwise
-
-
-rule Step/data.drop:
-  z; (DATA.DROP x)  ~>  $with_data(z, x, epsilon); epsilon
