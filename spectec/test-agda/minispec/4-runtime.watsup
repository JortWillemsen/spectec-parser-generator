;; Addresses

syntax addr hint(desc "address") = nat
syntax funcaddr hint(desc "function address") = addr
syntax globaladdr hint(desc "global address") = addr
syntax labeladdr hint(desc "label address") = addr
syntax hostaddr hint(desc "host address") = addr

var a : addr
var fa : funcaddr
var ga : globaladdr


;; Values

syntax num hint(desc "number") =
  | CONST numtype c_numtype
syntax val hint(desc "value") =
  | num

syntax result hint(desc "result") =
  | _VALS val* | TRAP

var v : val
var res : result


def $default_(valtype) : val  hint(partial)
def $default_(I32) = (CONST I32 0)


;; Configurations

syntax funcinst hint(desc "function instance") = moduleinst; func
syntax globalinst hint(desc "global instance") = val

syntax store hint(desc "store") =
  { FUNC funcinst*,
    GLOBAL globalinst* }

syntax moduleinst hint(desc "module instance") =
  { FUNC funcaddr*,
    GLOBAL globaladdr* }

syntax frame hint(desc "frame") =
  { LOCAL val*,
    MODULE moduleinst }
syntax state hint(desc "state") = store; frame
syntax config hint(desc "configuration") = state; admininstr*

var s : store
var f : frame
var z : state

var m : moduleinst
var fi : funcinst
var gi : globalinst


;; Auxiliary notation

def $funcaddr(state) : funcaddr*  hint(show %.MODULE.FUNC)
def $funcaddr((s; f)) = f.MODULE.FUNC

def $funcinst(state) : funcinst*  hint(show %.FUNC)
def $funcinst((s; f)) = s.FUNC

def $func(state, funcidx) : funcinst        hint(show %.FUNC#`[%])
def $global(state, globalidx) : globalinst  hint(show %.GLOBAL#`[%])
def $local(state, localidx) : val           hint(show %.LOCAL#`[%])

def $func((s; f), x) = s.FUNC[f.MODULE.FUNC[x]]
def $global((s; f), x) = s.GLOBAL[f.MODULE.GLOBAL[x]]
def $local((s; f), x) = f.LOCAL[x]


def $with_local(state, localidx, val) : state     hint(show %[.LOCAL[%] = %])
def $with_global(state, globalidx, val) : state   hint(show %[.GLOBAL[%] = %])

def $with_local((s; f), x, v) = s; f[.LOCAL[x] = v]
def $with_global((s; f), x, v) = s[.GLOBAL[f.MODULE.GLOBAL[x]] = v]; f


;; Administrative Instructions

syntax admininstr hint(show instr) hint(desc "administrative instruction") =
  | instr
  | CALL_ADDR funcaddr             hint(show CALL %)
  | LABEL_ n `{instr*} admininstr* hint(show LABEL_%#% %%)
  | FRAME_ n `{frame} admininstr*  hint(show FRAME_%#% %%)
  | TRAP

syntax E hint(desc "evaluation context") =
  | _HOLE `[ _ ]
  | _SEQ val* E instr*
  | LABEL_ n `{instr*} E
