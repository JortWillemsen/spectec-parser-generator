--- 3-typing.watsup	2023-04-28 16:42:58
+++ 3-typing.watsup	2023-05-02 17:10:20
@@ -1,9 +1,8 @@
 ;; Contexts
 
 syntax context hint(desc "context") =
-  { FUNC functype*, GLOBAL globaltype*, TABLE tabletype*, MEM memtype*,
-    ELEM elemtype*, DATA datatype*,
-    LOCAL valtype*, LABEL resulttype*, RETURN resulttype? }
+  { FUNC functype*, GLOBAL globaltype*,
+    LOCAL valtype*, LABEL resulttype*, RETURNS resulttype? }
 
 var C : context
 
@@ -11,113 +10,17 @@
 
 ;; Types
 
-relation Limits_ok: |- limits : nat         hint(show "K-limits")
 relation Functype_ok: |- functype : OK      hint(show "K-func")
 relation Globaltype_ok: |- globaltype : OK  hint(show "K-global")
-relation Tabletype_ok: |- tabletype : OK    hint(show "K-table")
-relation Memtype_ok: |- memtype : OK        hint(show "K-mem")
-relation Externtype_ok: |- externtype : OK  hint(show "K-extern")
 
 
-rule Limits_ok:
-  |- `[n_1 .. n_2] : k
-  -- if n_1 <= n_2 <= k
-
 rule Functype_ok:
   |- ft : OK
 
 rule Globaltype_ok:
   |- gt : OK
 
-rule Tabletype_ok:
-  |- lim rt : OK
-  -- Limits_ok: |- lim : $(2^32-1)
 
-rule Memtype_ok:
-  |- lim I8 : OK
-  -- Limits_ok: |- lim : $(2^16)
-
-
-rule Externtype_ok/func:
-  |- FUNC functype : OK
-  -- Functype_ok: |- functype : OK
-
-rule Externtype_ok/global:
-  |- GLOBAL globaltype : OK
-  -- Globaltype_ok: |- globaltype : OK
-
-rule Externtype_ok/table:
-  |- TABLE tabletype : OK
-  -- Tabletype_ok: |- tabletype : OK
-
-rule Externtype_ok/mem:
-  |- MEMORY memtype : OK
-  -- Memtype_ok: |- memtype : OK
-
-
-
-;; Subtyping
-
-relation Valtype_sub: |- valtype <: valtype       hint(show "S")
-relation Resulttype_sub: |- valtype* <: valtype*  hint(show "S-result")
-
-rule Valtype_sub/refl:
-  |- t <: t
-
-rule Valtype_sub/bot:
-  |- BOT <: t
-
-rule Resulttype_sub:
-  |- t_1* <: t_2*
-  -- (Valtype_sub: |- t_1 <: t_2)*
-
-
-relation Limits_sub: |- limits <: limits             hint(show "S-limits")
-relation Functype_sub: |- functype <: functype       hint(show "S-func")
-relation Globaltype_sub: |- globaltype <: globaltype hint(show "S-global")
-relation Tabletype_sub: |- tabletype <: tabletype    hint(show "S-table")
-relation Memtype_sub: |- memtype <: memtype          hint(show "S-mem")
-relation Externtype_sub: |- externtype <: externtype hint(show "S-extern")
-
-
-rule Limits_sub:
-  |- `[n_11 .. n_12] <: `[n_21 .. n_22]
-  -- if n_11 >= n_21
-  -- if n_12 <= n_22
-
-rule Functype_sub:
-  |- ft <: ft
-
-rule Globaltype_sub:
-  |- gt <: gt
-
-rule Tabletype_sub:
-  |- lim_1 rt <: lim_2 rt
-  -- Limits_sub: |- lim_1 <: lim_2
-
-rule Memtype_sub:
-  |- lim_1 I8 <: lim_2 I8
-  -- Limits_sub: |- lim_1 <: lim_2
-
-
-rule Externtype_sub/func:
-  |- FUNC ft_1 <: FUNC ft_2
-  -- Functype_sub: |- ft_1 <: ft_2
-
-rule Externtype_sub/global:
-  |- GLOBAL gt_1 <: GLOBAL gt_2
-  -- Globaltype_sub: |- gt_1 <: gt_2
-
-rule Externtype_sub/table:
-  |- TABLE tt_1 <: TABLE tt_2
-  -- Tabletype_sub: |- tt_1 <: tt_2
-
-rule Externtype_sub/mem:
-  |- MEMORY mt_1 <: MEMORY mt_2
-  -- Memtype_sub: |- mt_1 <: mt_2
-
-
-
 ;; Instructions
 
 relation Instr_ok: context |- instr : functype     hint(show "T")
@@ -139,12 +42,9 @@
   -- InstrSeq_ok: C |- instr_2 : t_2* -> t_3*
 
 rule InstrSeq_ok/weak:
-  C |- instr* : t'_1* -> t'_2*
+  C |- instr* : t_1* -> t_2*
   -- InstrSeq_ok: C |- instr* : t_1* -> t_2*
 
-  -- Resulttype_sub: |- t'_1* <: t_1*
-  -- Resulttype_sub: |- t_2* <: t'_2*
-
 rule InstrSeq_ok/frame:
   C |- instr* : t* t_1* -> t* t_2*
   -- InstrSeq_ok: C |- instr* : t_1* -> t_2*
@@ -165,8 +65,7 @@
 
 rule Instr_ok/select-impl:
   C |- SELECT : t t I32 -> t
-  -- Valtype_sub: |- t <: t'
-  -- if t' = numtype \/ t' = vectype
+  -- if t = numtype
 
 
 relation Blocktype_ok: context |- blocktype : functype hint(show "K-block")
@@ -200,25 +99,15 @@
   C |- BR_IF l : t* I32 -> t*
   -- if C.LABEL[l] = t*
 
-rule Instr_ok/br_table:
-  C |- BR_TABLE l* l' : t_1* t* -> t_2*
-  -- (Resulttype_sub: |- t* <: C.LABEL[l])*
-  -- Resulttype_sub: |- t* <: C.LABEL[l']
-
 rule Instr_ok/return:
   C |- RETURN : t_1* t* -> t_2*
-  -- if C.RETURN = (t*)
+  -- if C.RETURNS = (t*)
 
 rule Instr_ok/call:
   C |- CALL x : t_1* -> t_2*
   -- if C.FUNC[x] = t_1* -> t_2*
 
-rule Instr_ok/call_indirect:
-  C |- CALL_INDIRECT x ft : t_1* I32 -> t_2*
-  -- if C.TABLE[x] = lim FUNCREF
-  -- if ft = t_1* -> t_2*
 
-
 rule Instr_ok/const:
   C |- CONST nt c_nt : epsilon -> nt
 
@@ -235,36 +124,6 @@
   C |- RELOP nt relop : nt nt -> I32
 
 
-rule Instr_ok/extend:
-  C |- EXTEND nt n : nt -> nt
-  -- if n <= $size(nt)
-
-rule Instr_ok/reinterpret:
-  C |- CVTOP nt_1 REINTERPRET nt_2 : nt_2 -> nt_1
-  -- if nt_1 =/= nt_2
-  -- if $size(nt_1) = $size(nt_2)
-
-rule Instr_ok/convert-i:
-  C |- CVTOP in_1 CONVERT in_2 sx? : in_2 -> in_1
-  -- if in_1 =/= in_2
-  -- if sx? = epsilon <=> $size(in_1) > $size(in_2)
-
-rule Instr_ok/convert-f:
-  C |- CVTOP fn_1 CONVERT fn_2 : fn_2 -> fn_1
-  -- if fn_1 =/= fn_2
-
-
-rule Instr_ok/ref.null:
-  C |- REF.NULL rt : epsilon -> rt
-
-rule Instr_ok/ref.func:
-  C |- REF.FUNC x : epsilon -> FUNCREF
-  -- if C.FUNC[x] = ft
-
-rule Instr_ok/ref.is_null:
-  C |- REF.IS_NULL : rt -> I32
-
-
 rule Instr_ok/local.get:
   C |- LOCAL.GET x : epsilon -> t
   -- if C.LOCAL[x] = t
@@ -287,81 +146,6 @@
   -- if C.GLOBAL[x] = MUT t
 
 
-rule Instr_ok/table.get:
-  C |- TABLE.GET x : I32 -> rt
-  -- if C.TABLE[x] = lim rt
-
-rule Instr_ok/table.set:
-  C |- TABLE.SET x : I32 rt -> epsilon
-  -- if C.TABLE[x] = lim rt
-
-rule Instr_ok/table.size:
-  C |- TABLE.SIZE x : epsilon -> I32
-  -- if C.TABLE[x] = tt
-
-rule Instr_ok/table.grow:
-  C |- TABLE.GROW x : rt I32 -> I32
-  -- if C.TABLE[x] = lim rt
-
-rule Instr_ok/table.fill:
-  C |- TABLE.FILL x : I32 rt I32 -> epsilon
-  -- if C.TABLE[x] = lim rt
-
-rule Instr_ok/table.copy:
-  C |- TABLE.COPY x_1 x_2 : I32 I32 I32 -> epsilon
-  -- if C.TABLE[x_1] = lim_1 rt
-  -- if C.TABLE[x_2] = lim_2 rt
-
-rule Instr_ok/table.init:
-  C |- TABLE.INIT x_1 x_2 : I32 I32 I32 -> epsilon
-  -- if C.TABLE[x_1] = lim rt
-  -- if C.ELEM[x_2] = rt
-
-rule Instr_ok/elem.drop:
-  C |- ELEM.DROP x : epsilon -> epsilon
-  -- if C.ELEM[x] = rt
-
-
-rule Instr_ok/memory.size:
-  C |- MEMORY.SIZE : epsilon -> I32
-  -- if C.MEM[0] = mt
-
-rule Instr_ok/memory.grow:
-  C |- MEMORY.GROW : I32 -> I32
-  -- if C.MEM[0] = mt
-
-rule Instr_ok/memory.fill:
-  C |- MEMORY.FILL : I32 I32 I32 -> I32
-  -- if C.MEM[0] = mt
-
-rule Instr_ok/memory.copy:
-  C |- MEMORY.COPY : I32 I32 I32 -> I32
-  -- if C.MEM[0] = mt
-
-rule Instr_ok/memory.init:
-  C |- MEMORY.INIT x : I32 I32 I32 -> I32
-  -- if C.MEM[0] = mt
-  -- if C.DATA[x] = OK
-
-rule Instr_ok/data.drop:
-  C |- DATA.DROP x : epsilon -> epsilon
-  -- if C.DATA[x] = OK
-
-rule Instr_ok/load:
-  C |- LOAD nt (n _ sx)? n_A n_O : I32 -> nt
-  -- if C.MEM[0] = mt
-  -- if $(2^(n_A) <= $size(nt)/8)
-  -- if $(2^(n_A) <= n/8 < $size(nt)/8)?
-  -- if n? = epsilon \/ nt = in
-
-rule Instr_ok/store:
-  C |- STORE nt n? n_A n_O : I32 nt -> epsilon
-  -- if C.MEM[0] = mt
-  -- if $(2^(n_A) <= $size(nt)/8)
-  -- if $(2^(n_A) <= n/8 < $size(nt)/8)?
-  -- if n? = epsilon \/ nt = in
-
-
 ;; Constant Expressions
 
 relation Instr_const: context |- instr CONST             hint(show "C-instr")
@@ -371,12 +155,6 @@
 rule Instr_const/const:
   C |- (CONST nt c) CONST
 
-rule Instr_const/ref.null:
-  C |- (REF.NULL rt) CONST
-
-rule Instr_const/ref.func:
-  C |- (REF.FUNC x) CONST
-
 rule Instr_const/global.get:
   C |- (GLOBAL.GET x) CONST
   -- if C.GLOBAL[x] = epsilon t
@@ -396,12 +174,6 @@
 
 relation Func_ok: context |- func : functype         hint(show "T-func")
 relation Global_ok: context |- global : globaltype   hint(show "T-global")
-relation Table_ok: context |- table : tabletype      hint(show "T-table")
-relation Mem_ok: context |- mem : memtype            hint(show "T-mem")
-relation Elem_ok: context |- elem : reftype          hint(show "T-elem")
-relation Data_ok: context |- data : OK               hint(show "T-data")
-relation Elemmode_ok: context |- elemmode : reftype  hint(show "T-elemmode")
-relation Datamode_ok: context |- datamode : OK       hint(show "T-datamode")
 relation Start_ok: context |- start : OK             hint(show "T-start")
 
 
@@ -409,7 +181,7 @@
   C |- FUNC ft t* expr : ft
   -- if ft = t_1* -> t_2*
   -- Functype_ok: |- ft : OK
-  -- Expr_ok: C, LOCAL t_1* t*, LABEL (t_2*), RETURN (t_2*) |- expr : t_2*
+  -- Expr_ok: C, LOCAL t_1* t*, LABEL (t_2*), RETURNS (t_2*) |- expr : t_2*
 
 rule Global_ok:
   C |- GLOBAL gt expr : gt
@@ -417,86 +189,22 @@
   -- if gt = MUT? t
   -- Expr_ok_const: C |- expr : t CONST
 
-rule Table_ok:
-  C |- TABLE tt : tt
-  -- Tabletype_ok: |- tt : OK
-
-rule Mem_ok:
-  C |- MEMORY mt : mt
-  -- Memtype_ok: |- mt : OK
-
-rule Elem_ok:
-  C |- ELEM rt expr* elemmode? : rt
-  -- (Expr_ok: C |- expr : rt)*
-  -- (Elemmode_ok: C |- elemmode : rt)?
-
-rule Data_ok:
-  C |- DATA (b*)* datamode? : OK
-  -- (Datamode_ok: C |- datamode : OK)?
-
-rule Elemmode_ok/active:
-  C |- TABLE x expr : rt
-  -- if C.TABLE[x] = lim rt
-  -- (Expr_ok_const: C |- expr : I32 CONST)*
-
-rule Elemmode_ok/declare:
-  C |- DECLARE : rt
-
-rule Datamode_ok:
-  C |- MEMORY 0 expr : OK
-  -- if C.MEM[0] = mt
-  -- (Expr_ok_const: C |- expr : I32 CONST)*
-
 rule Start_ok:
   C |- START x : OK
   -- if C.FUNC[x] = epsilon -> epsilon
 
 
-relation Import_ok: context |- import : externtype        hint(show "T-import")
-relation Export_ok: context |- export : externtype        hint(show "T-export")
-relation Externuse_ok: context |- externuse : externtype  hint(show "T-externuse")
-
-rule Import_ok:
-  C |- IMPORT name_1 name_2 xt : xt
-  -- Externtype_ok: |- xt : OK
-
-rule Export_ok:
-  C |- EXPORT name externuse : xt
-  -- Externuse_ok: C |- externuse : xt
-
-rule Externuse_ok/func:
-  C |- FUNC x : FUNC ft
-  -- if C.FUNC[x] = ft
-
-rule Externuse_ok/global:
-  C |- GLOBAL x : GLOBAL gt
-  -- if C.GLOBAL[x] = gt
-
-rule Externuse_ok/table:
-  C |- TABLE x : TABLE tt
-  -- if C.TABLE[x] = tt
-
-rule Externuse_ok/mem:
-  C |- MEMORY x : MEMORY mt
-  -- if C.MEM[x] = mt
-
-
 relation Module_ok: |- module : OK      hint(show "T-module")
 
 rule Module_ok:
-  |- MODULE import* func* global* table* mem* elem* data^n start* export* : OK
+  |- MODULE func* global* start* : OK
   ;; TODO: incremental contexts for globals
-  -- if C = {FUNC ft*, GLOBAL gt*, TABLE tt*, MEM mt*, ELEM rt*, DATA OK^n}
+  -- if C = {FUNC ft*, GLOBAL gt*}
 
   -- (Func_ok: C |- func : ft)*
   -- (Global_ok: C |- global : gt)*
-  -- (Table_ok: C |- table : tt)*
-  -- (Mem_ok: C |- mem : mt)*
 
-  -- (Elem_ok: C |- elem : rt)*
-  -- (Data_ok: C |- data : OK)^n
   -- (Start_ok: C |- start : OK)*
 
-  -- if |mem*| <= 1
   -- if |start*| <= 1
   ;; -- TODO: disjoint export names
