-- Agda bindings for the Haskell parsers.
-- Generated by BNFC.

module SpecTec.Example.Parser where

open import Agda.Builtin.Char using () renaming (Char to Char)
open import Agda.Builtin.List using () renaming (List to #List)
open import Agda.Builtin.String using () renaming
  ( String to #String
  ; primStringFromList to #stringFromList
  )

open import SpecTec.Example.AST using (Exp)

{-# FOREIGN GHC import qualified Data.Text #-}
{-# FOREIGN GHC import SpecTec.Example.Abs #-}
{-# FOREIGN GHC import SpecTec.Example.ErrM #-}
{-# FOREIGN GHC import SpecTec.Example.Par #-}

-- Error monad of BNFC

data Err A : Set where
  ok : A → Err A
  bad : #List Char → Err A

{-# COMPILE GHC Err = data Err
  ( Ok
  | Bad
  ) #-}

-- Happy parsers

postulate
  parseExp : #String → Err Exp
  parseExp1 : #String → Err Exp
  parseExp2 : #String → Err Exp

{-# COMPILE GHC parseExp = pExp . myLexer . Data.Text.unpack #-}
{-# COMPILE GHC parseExp1 = pExp1 . myLexer . Data.Text.unpack #-}
{-# COMPILE GHC parseExp2 = pExp2 . myLexer . Data.Text.unpack #-}
