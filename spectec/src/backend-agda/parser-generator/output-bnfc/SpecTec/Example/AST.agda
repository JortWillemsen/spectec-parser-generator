-- Agda bindings for the Haskell abstract syntax data types.
-- Generated by BNFC.

module SpecTec.Example.AST where

open import Agda.Builtin.Char using () renaming (Char to Char)
open import Agda.Builtin.Float public using () renaming (Float to Double)
open import Agda.Builtin.Int   public using () renaming (Int to Integer)
open import Agda.Builtin.List using () renaming (List to #List)
open import Agda.Builtin.String using () renaming
  ( String to #String
  ; primStringFromList to #stringFromList
  )

{-# FOREIGN GHC import qualified Data.Text #-}
{-# FOREIGN GHC import SpecTec.Example.Abs #-}
{-# FOREIGN GHC import SpecTec.Example.Print (printTree) #-}

mutual

  data Exp : Set where
    eAdd : (e₁ e₂ : Exp) → Exp
    eSub : (e₁ e₂ : Exp) → Exp
    eMul : (e₁ e₂ : Exp) → Exp
    eDiv : (e₁ e₂ : Exp) → Exp
    eInt : (x : Integer) → Exp

  {-# COMPILE GHC Exp = data Exp
    ( EAdd
    | ESub
    | EMul
    | EDiv
    | EInt
    ) #-}

-- Binding the pretty printers.

postulate
  printExp : Exp → #String
  printInteger : Integer → #String

{-# COMPILE GHC printExp = \ e -> Data.Text.pack (printTree (e :: Exp)) #-}
{-# COMPILE GHC printInteger = \ x -> Data.Text.pack (printTree (x :: Integer)) #-}
