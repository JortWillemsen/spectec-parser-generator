-- File generated by the BNF Converter (bnfc 2.9.5).

-- Agda bindings for the Haskell parsers.

module Example.Parser where

open import Agda.Builtin.Char using (Char)
open import Agda.Builtin.List using ([]; _∷_) renaming (List to #List)
open import Agda.Builtin.String using () renaming
  ( String to #String
  ; primStringFromList to #stringFromList
  )

open import Example.AST using
  ( Float
  ; NumType
  ; BinOp
  ; ArithmeticOp
  ; Bit
  )

{-# FOREIGN GHC import Prelude (Bool, Char, Double, Integer, String, (.)) #-}
{-# FOREIGN GHC import qualified Data.Text #-}
{-# FOREIGN GHC import qualified Example.ErrM #-}
{-# FOREIGN GHC import Example.Par #-}

-- Error monad of BNFC

data Err A : Set where
  ok  : A → Err A
  bad : #List Char → Err A

{-# COMPILE GHC Err = data Example.ErrM.Err
  ( Example.ErrM.Ok
  | Example.ErrM.Bad
  ) #-}

-- Happy parsers

postulate
  parseFloat : #String → Err Float
  parseNumType : #String → Err NumType
  parseBinOp : #String → Err BinOp
  parseArithmeticOp : #String → Err ArithmeticOp
  parseBit : #String → Err Bit

{-# COMPILE GHC parseFloat = pFloat . myLexer #-}
{-# COMPILE GHC parseNumType = pNumType . myLexer #-}
{-# COMPILE GHC parseBinOp = pBinOp . myLexer #-}
{-# COMPILE GHC parseArithmeticOp = pArithmeticOp . myLexer #-}
{-# COMPILE GHC parseBit = pBit . myLexer #-}
