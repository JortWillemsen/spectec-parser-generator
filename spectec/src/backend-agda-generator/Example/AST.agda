-- File generated by the BNF Converter (bnfc 2.9.5).

-- Agda bindings for the Haskell abstract syntax data types.

module Example.AST where

open import Agda.Builtin.Char using (Char)
open import Agda.Builtin.Float public using () renaming (Float to Double)
open import Agda.Builtin.Int   public using () renaming (Int to Integer)
open import Agda.Builtin.Int using () renaming (pos to #pos)
open import Agda.Builtin.List using ([]; _∷_) renaming (List to #List)
open import Agda.Builtin.String using () renaming
  ( String to #String
  ; primStringFromList to #stringFromList
  )

{-# FOREIGN GHC import Prelude (Bool, Char, Double, Integer, String, (.)) #-}
{-# FOREIGN GHC import qualified Data.Text #-}
{-# FOREIGN GHC import qualified Example.Abs #-}
{-# FOREIGN GHC import Example.Print (printTree) #-}

mutual

  data Float : Set where
    float : (x : Integer) → Float

  {-# COMPILE GHC Float = data Example.Abs.Float (Example.Abs.Float) #-}

  data NumType : Set where
    i32 : (x : Integer) → NumType
    i64 : (x : Integer) → NumType
    f32 : (f : Float) → NumType
    f64 : (f : Float) → NumType

  {-# COMPILE GHC NumType = data Example.Abs.NumType
    ( Example.Abs.I32
    | Example.Abs.I64
    | Example.Abs.F32
    | Example.Abs.F64
    ) #-}

  data BinOp : Set where
    aDD : BinOp
    sUM : BinOp
    mUL : BinOp
    dIV : BinOp

  {-# COMPILE GHC BinOp = data Example.Abs.BinOp
    ( Example.Abs.ADD
    | Example.Abs.SUM
    | Example.Abs.MUL
    | Example.Abs.DIV
    ) #-}

  data ArithmeticOp : Set where
    arithmeticOp : (n : NumType) (b : BinOp) → ArithmeticOp

  {-# COMPILE GHC ArithmeticOp = data Example.Abs.ArithmeticOp (Example.Abs.ArithmeticOp) #-}

  data Bit : Set where
    zero : Bit
    one  : Bit

  {-# COMPILE GHC Bit = data Example.Abs.Bit
    ( Example.Abs.Zero
    | Example.Abs.One
    ) #-}

-- Binding the pretty printers.

postulate
  printFloat        : Float → #String
  printNumType      : NumType → #String
  printBinOp        : BinOp → #String
  printArithmeticOp : ArithmeticOp → #String
  printBit          : Bit → #String
  printInteger      : Integer → #String

{-# COMPILE GHC printFloat = \ f -> Data.Text.pack (printTree (f :: Example.Abs.Float)) #-}
{-# COMPILE GHC printNumType = \ n -> Data.Text.pack (printTree (n :: Example.Abs.NumType)) #-}
{-# COMPILE GHC printBinOp = \ b -> Data.Text.pack (printTree (b :: Example.Abs.BinOp)) #-}
{-# COMPILE GHC printArithmeticOp = \ a -> Data.Text.pack (printTree (a :: Example.Abs.ArithmeticOp)) #-}
{-# COMPILE GHC printBit = \ b -> Data.Text.pack (printTree (b :: Example.Abs.Bit)) #-}
{-# COMPILE GHC printInteger = \ x -> Data.Text.pack (printTree (x :: Integer)) #-}
