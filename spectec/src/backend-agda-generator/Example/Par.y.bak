-- -*- haskell -*- File generated by the BNF Converter (bnfc 2.9.5).

-- Parser definition for use with Happy
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
{-# LANGUAGE PatternSynonyms #-}

module Example.Par
  ( happyError
  , myLexer
  , pFloat
  , pNumType
  , pBinOp
  , pArithmeticOp
  ) where

import Prelude

import qualified Example.Abs
import Example.Lex
import qualified Data.Text

}

%name pFloat Float
%name pNumType NumType
%name pBinOp BinOp
%name pArithmeticOp ArithmeticOp
-- no lexer declaration
%monad { Err } { (>>=) } { return }
%tokentype {Token}
%token
  '('      { PT _ (TS _ 1) }
  ')'      { PT _ (TS _ 2) }
  '.'      { PT _ (TS _ 3) }
  'Add'    { PT _ (TS _ 4) }
  'Div'    { PT _ (TS _ 5) }
  'Mul'    { PT _ (TS _ 6) }
  'Sum'    { PT _ (TS _ 7) }
  L_integ  { PT _ (TI $$)  }

%%

Integer :: { Integer }
Integer  : L_integ  { (read (Data.Text.unpack $1)) :: Integer }

Float :: { Example.Abs.Float }
Float : Integer { Example.Abs.Float $1 }

NumType :: { Example.Abs.NumType }
NumType
  : Integer { Example.Abs.I32 $1 }
  | Integer { Example.Abs.I64 $1 }
  | Float { Example.Abs.F32 $1 }
  | Float { Example.Abs.F64 $1 }

BinOp :: { Example.Abs.BinOp }
BinOp
  : 'Add' { Example.Abs.ADD }
  | 'Sum' { Example.Abs.SUM }
  | 'Mul' { Example.Abs.MUL }
  | 'Div' { Example.Abs.DIV }

ArithmeticOp :: { Example.Abs.ArithmeticOp }
ArithmeticOp
  : '(' NumType '.' BinOp ')' { Example.Abs.ArithmeticOp $2 $4 }

{

type Err = Either String

happyError :: [Token] -> Err a
happyError ts = Left $
  "syntax error at " ++ tokenPos ts ++
  case ts of
    []      -> []
    [Err _] -> " due to lexer error"
    t:_     -> " before `" ++ (prToken t) ++ "'"

myLexer :: Data.Text.Text -> [Token]
myLexer = tokens

}

