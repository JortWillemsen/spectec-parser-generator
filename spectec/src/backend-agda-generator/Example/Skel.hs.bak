-- File generated by the BNF Converter (bnfc 2.9.5).

-- Templates for pattern matching on abstract syntax

{-# OPTIONS_GHC -fno-warn-unused-matches #-}

module Example.Skel where

import Prelude (($), Either(..), String, (++), Show, show)
import qualified Example.Abs

type Err = Either String
type Result = Err String

failure :: Show a => a -> Result
failure x = Left $ "Undefined case: " ++ show x

transFloat :: Example.Abs.Float -> Result
transFloat x = case x of
  Example.Abs.Float integer -> failure x

transNumType :: Example.Abs.NumType -> Result
transNumType x = case x of
  Example.Abs.I32 integer -> failure x
  Example.Abs.I64 integer -> failure x
  Example.Abs.F32 float -> failure x
  Example.Abs.F64 float -> failure x

transBinOp :: Example.Abs.BinOp -> Result
transBinOp x = case x of
  Example.Abs.ADD -> failure x
  Example.Abs.SUM -> failure x
  Example.Abs.MUL -> failure x
  Example.Abs.DIV -> failure x

transArithmeticOp :: Example.Abs.ArithmeticOp -> Result
transArithmeticOp x = case x of
  Example.Abs.ArithmeticOp numtype binop -> failure x
